# SPDX-License-Identifier: GPL-2.0-or-later
# ToolsForCategoricalTowers: Tools for CategoricalTowers
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

#! @Chapter Futher CAP operations

#! @Section Add-methods

#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `BasisOfSolutionsOfHomogeneousDoubleLinearSystemInLinearCategory`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2, arg3, arg4, arg5 ) \mapsto \mathtt[BasisOfSolutionsOfHomogeneousDoubleLinearSystemInLinearCategory](arg2, arg3, arg4, arg5)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddBasisOfSolutionsOfHomogeneousDoubleLinearSystemInLinearCategory",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddBasisOfSolutionsOfHomogeneousDoubleLinearSystemInLinearCategory",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `BasisOfSolutionsOfHomogeneousLinearSystemInLinearCategory`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2, arg3 ) \mapsto \mathtt[BasisOfSolutionsOfHomogeneousLinearSystemInLinearCategory](arg2, arg3)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddBasisOfSolutionsOfHomogeneousLinearSystemInLinearCategory",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddBasisOfSolutionsOfHomogeneousLinearSystemInLinearCategory",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `BiasedRelativeWeakFiberProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2, arg3, arg4 ) \mapsto \mathtt[BiasedRelativeWeakFiberProduct](arg2, arg3, arg4)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `Colimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms ) \mapsto \mathtt[Colimit](objects, decorated_morphisms)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddColimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddColimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `EmbeddingOfSumOfImagesOfAllMorphisms`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[EmbeddingOfSumOfImagesOfAllMorphisms](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddEmbeddingOfSumOfImagesOfAllMorphisms",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddEmbeddingOfSumOfImagesOfAllMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InjectionOfCofactorOfColimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, k ) \mapsto \mathtt[InjectionOfCofactorOfColimit](objects, decorated_morphisms, k)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInjectionOfCofactorOfColimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddInjectionOfCofactorOfColimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InjectionOfCofactorOfColimitWithGivenColimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, k, P ) \mapsto \mathtt[InjectionOfCofactorOfColimitWithGivenColimit](objects, decorated_morphisms, k, P)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddInjectionOfCofactorOfColimitWithGivenColimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddInjectionOfCofactorOfColimitWithGivenColimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsWeakInitial`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2 ) \mapsto \mathtt[IsWeakInitial](arg2)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsWeakInitial",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsWeakInitial",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsWeakTerminal`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2 ) \mapsto \mathtt[IsWeakTerminal](arg2)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddIsWeakTerminal",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddIsWeakTerminal",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `Limit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms ) \mapsto \mathtt[Limit](objects, decorated_morphisms)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddLimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddLimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MereExistenceOfUniqueSolutionOfHomogeneousLinearSystemInAbCategory`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2, arg3 ) \mapsto \mathtt[MereExistenceOfUniqueSolutionOfHomogeneousLinearSystemInAbCategory](arg2, arg3)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMereExistenceOfUniqueSolutionOfHomogeneousLinearSystemInAbCategory",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMereExistenceOfUniqueSolutionOfHomogeneousLinearSystemInAbCategory",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MereExistenceOfUniqueSolutionOfLinearSystemInAbCategory`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2, arg3, arg4 ) \mapsto \mathtt[MereExistenceOfUniqueSolutionOfLinearSystemInAbCategory](arg2, arg3, arg4)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMereExistenceOfUniqueSolutionOfLinearSystemInAbCategory",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMereExistenceOfUniqueSolutionOfLinearSystemInAbCategory",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismBetweenCoproducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( source_diagram, pair, range_diagram ) \mapsto \mathtt[MorphismBetweenCoproducts](source_diagram, pair, range_diagram)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismBetweenCoproducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismBetweenCoproducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismBetweenCoproductsWithGivenCoproducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( S, source_diagram, pair, range_diagram, T ) \mapsto \mathtt[MorphismBetweenCoproductsWithGivenCoproducts](S, source_diagram, pair, range_diagram, T)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismBetweenCoproductsWithGivenCoproducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismBetweenCoproductsWithGivenCoproducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismBetweenDirectProducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( source_diagram, pair, range_diagram ) \mapsto \mathtt[MorphismBetweenDirectProducts](source_diagram, pair, range_diagram)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismBetweenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismBetweenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismBetweenDirectProductsWithGivenDirectProducts`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( S, source_diagram, pair, range_diagram, T ) \mapsto \mathtt[MorphismBetweenDirectProductsWithGivenDirectProducts](S, source_diagram, pair, range_diagram, T)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismBetweenDirectProductsWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismBetweenDirectProductsWithGivenDirectProducts",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismOntoSumOfImagesOfAllMorphisms`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b ) \mapsto \mathtt[MorphismOntoSumOfImagesOfAllMorphisms](a, b)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddMorphismOntoSumOfImagesOfAllMorphisms",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddMorphismOntoSumOfImagesOfAllMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ProjectionInFactorOfLimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, k ) \mapsto \mathtt[ProjectionInFactorOfLimit](objects, decorated_morphisms, k)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddProjectionInFactorOfLimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddProjectionInFactorOfLimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ProjectionInFactorOfLimitWithGivenLimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, k, P ) \mapsto \mathtt[ProjectionInFactorOfLimitWithGivenLimit](objects, decorated_morphisms, k, P)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddProjectionInFactorOfLimitWithGivenLimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddProjectionInFactorOfLimitWithGivenLimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ProjectionOfBiasedRelativeWeakFiberProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c ) \mapsto \mathtt[ProjectionOfBiasedRelativeWeakFiberProduct](a, b, c)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddProjectionOfBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddProjectionOfBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `ProjectionOfBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c, P ) \mapsto \mathtt[ProjectionOfBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct](a, b, c, P)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddProjectionOfBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddProjectionOfBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `RelativeLift`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( beta, alpha, nu ) \mapsto \mathtt[RelativeLift](beta, alpha, nu)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddRelativeLift",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddRelativeLift",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `SetOfMorphismsOfFiniteCategory`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: (  ) \mapsto \mathtt[SetOfMorphismsOfFiniteCategory]()$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddSetOfMorphismsOfFiniteCategory",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddSetOfMorphismsOfFiniteCategory",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `SetOfObjectsOfCategory`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: (  ) \mapsto \mathtt[SetOfObjectsOfCategory]()$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddSetOfObjectsOfCategory",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddSetOfObjectsOfCategory",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `SumOfImagesOfAllMorphisms`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( arg2, arg3 ) \mapsto \mathtt[SumOfImagesOfAllMorphisms](arg2, arg3)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddSumOfImagesOfAllMorphisms",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddSumOfImagesOfAllMorphisms",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalMorphismFromColimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, T, tau ) \mapsto \mathtt[UniversalMorphismFromColimit](objects, decorated_morphisms, T, tau)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalMorphismFromColimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddUniversalMorphismFromColimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalMorphismFromColimitWithGivenColimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, T, tau, P ) \mapsto \mathtt[UniversalMorphismFromColimitWithGivenColimit](objects, decorated_morphisms, T, tau, P)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalMorphismFromColimitWithGivenColimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddUniversalMorphismFromColimitWithGivenColimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalMorphismIntoBiasedRelativeWeakFiberProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c, t ) \mapsto \mathtt[UniversalMorphismIntoBiasedRelativeWeakFiberProduct](a, b, c, t)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalMorphismIntoBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddUniversalMorphismIntoBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalMorphismIntoBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( a, b, c, t, P ) \mapsto \mathtt[UniversalMorphismIntoBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct](a, b, c, t, P)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalMorphismIntoBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddUniversalMorphismIntoBiasedRelativeWeakFiberProductWithGivenBiasedRelativeWeakFiberProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalMorphismIntoLimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, T, tau ) \mapsto \mathtt[UniversalMorphismIntoLimit](objects, decorated_morphisms, T, tau)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalMorphismIntoLimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddUniversalMorphismIntoLimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup


#! @BeginGroup
#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `UniversalMorphismIntoLimitWithGivenLimit`.
#! Optionally, a weight (default: 100) can be specified which should roughly correspond
#! to the computational complexity of the function (lower weight == less complex == faster execution).
#! $F: ( objects, decorated_morphisms, T, tau, P ) \mapsto \mathtt[UniversalMorphismIntoLimitWithGivenLimit](objects, decorated_morphisms, T, tau, P)$.
#! @Returns nothing
#! @Arguments C, F
@DeclareOperation( "AddUniversalMorphismIntoLimitWithGivenLimit",
                  [ IsCapCategory, IsFunction ] );

#! @Arguments C, F, weight
@DeclareOperation( "AddUniversalMorphismIntoLimitWithGivenLimit",
                  [ IsCapCategory, IsFunction, IsInt ] );
#! @EndGroup

